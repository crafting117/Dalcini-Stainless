{% if mlveda_code_flag == true %}

<script>
// MLveda.formatMoney
"undefined"==typeof Mlveda&&(Mlveda={}),Mlveda.formatMoney||(Mlveda.formatMoney=function(a,e){function t(a,e){return void 0===a?e:a}function r(a,e,r,o){if(e=t(e,2),r=t(r,","),o=t(o,"."),isNaN(a)||null==a)return 0;var n=(a=(a/100).toFixed(e)).split(".");return n[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+r)+(n[1]?o+n[1]:"")}"string"==typeof a&&(a=a.replace(".",""));var o="",n=/\{\{\s*(\w+)\s*\}\}/,s=e||"$ {{ amount }}";switch(s.match(n)[1]){case"amount":o=r(a,2);break;case"amount_no_decimals":o=r(a,0);break;case"amount_with_comma_separator":o=r(a,2,".",",");break;case"amount_with_space_separator":o=r(a,2," ",",");break;case"amount_with_period_and_space_separator":o=r(a,2," ",".");break;case"amount_no_decimals_with_comma_separator":o=r(a,0,".",",");break;case"amount_no_decimals_with_space_separator":o=r(a,0," ");break;case"amount_with_apostrophe_separator":o=r(a,2,"'",".")}return s.replace(n,o)}); 

var queryParameterRegex = /\?.+=.*/g;

var isSaleClass = {{ settings.mlvedaMCP_isSaleClass }};  
var saleClass = "{{ settings.mlvedaMCP_saleClass }}";

var isSaveAmount = {{ settings.mlvedaMCP_isSaveAmount }};
var saveAmountClass = "{{ settings.mlvedaMCP_saveAmountClass }}";
{% if settings.mlvedaMCP_isSaveAmount %}
var span_in_save = "{{ settings.mlvedaMCP_saveAmountClass }} span.money";
{% else %}
var span_in_save = "";
{% endif %}

var isSalePercentage = {{ settings.mlvedaMCP_isSalePercentage }};
var salePercentageClass= "{{ settings.mlvedaMCP_salePercentageClass }}";

var isTextWithPrice = {{ settings.mlvedaMCP_isTextWithPrice }};
var textWithPrice = "{{ settings.mlvedaMCP_textwithPrice }}";

var priceColor = "{{ settings.mlvedaMCP_priceColor }}";

var appendStoreCurrency = ["collections","search","products"];

var myURLarray = ["collections","search","frequently"];

var Recommendation_RecentlyviewedURLHandles =  "{{ settings.mlvedaMCP_recommendation_Recentlyviewed_URLHandle }}";
myURLarray.push(...Recommendation_RecentlyviewedURLHandles.split(","));

function findSaleDetails(className){
 var TotalSaleClass = className.split(",").length;
    var tempSaleTag = $m(this).find(className);
    if(tempSaleTag.length == 0 && $m(this).parent().find(className).length <= TotalSaleClass){
      tempSaleTag = $m(this).parent().find(className);
      if(tempSaleTag.length == 0 && $m(this).parent().parent().find(className).length <= TotalSaleClass){
        tempSaleTag = $m(this).parent().parent().find(className);
      }	
    }
    return tempSaleTag;
}

var Fromregex = /from|von|a partire dal|desde|van|de|da/i;
function removeFrom(){ 
 var spanmoneyelement = document.querySelectorAll("span.money");
  for(var i=0; i<spanmoneyelement.length; i++){
	var fromelement = spanmoneyelement[i].parentNode;
    if(fromelement != null && !(Fromregex.test(fromelement.textContent))){
       fromelement = fromelement.parentNode;
     }	
    if(fromelement != null){
    var frommatch = fromelement.innerText.match(Fromregex);
    if(frommatch != null && $m(fromelement).find("select[name='id']").length <= 0){

   var allElements = fromelement.querySelectorAll("*");
    for(var j=0; j<allElements.length; j++){
if(allElements[j] && allElements[j].previousSibling && Fromregex.test(allElements[j].previousSibling.textContent.trim()) && allElements[j].previousSibling.textContent.trim().match(Fromregex) && (allElements[j].previousSibling.textContent.trim().match(Fromregex)[0].length == allElements[j].previousSibling.textContent.trim().length || (textWithPrice.length > 0 && allElements[j].previousSibling.textContent.trim().indexOf(textWithPrice) != -1))){
        	console.log("from textContent");
			allElements[j].previousSibling.textContent = allElements[j].previousSibling.textContent.replace(Fromregex,"");
			//return false;
      	  }
if(allElements[j].children.length == 0 && allElements[j].innerText != null && Fromregex.test(allElements[j].innerText) && allElements[j].innerText.trim().match(Fromregex) && (allElements[j].innerText.trim().match(Fromregex)[0].length === allElements[j].innerText.trim().length || (textWithPrice.length > 0 && allElements[j].innerText.trim().indexOf(textWithPrice) != -1))){
			console.log("from innnerHTML");
		allElements[j].innerHTML = allElements[j].innerText.replace(Fromregex,"");
          }
		}
	  }	
    }
  }
}

function removeOtherText(referenceElement, Texttoberemoved){
   var textRegex = new RegExp(Texttoberemoved,'g');
   var tempElemet = referenceElement[0].parentNode;
   if(tempElemet.innerHTML.match(textRegex) == null){
	  tempElemet = tempElemet.parentNode;
 	} 
  for(var a=0; a<tempElemet.children.length; a++){

    if(tempElemet.children[a].previousSibling != null && tempElemet.children[a].previousSibling.textContent.trim().length > 0 && textRegex.test(tempElemet.children[a].previousSibling.textContent.trim())){
		tempElemet.children[a].previousSibling.textContent = tempElemet.children[a].previousSibling.textContent.replace(textRegex,"");
		//console.log("from text Content");
	}
    
    if(tempElemet.children[a].innerHTML != null && textRegex.test(tempElemet.children[a].innerHTML)){
        tempElemet.children[a].innerHTML = tempElemet.children[a].innerHTML.replace(textRegex,"");
		//console.log("from innerHTML");
    }
        
   }
}
  
window.mlvedaFlagCalled = false;
//$m(".icon-fallback-text").remove(); // this is just to remove + when prices are varies 
                
var mlvedaCallUrl = "//www.mlveda.com/ShopifyApps/ShopifyMultiPricing/getPrices?shop={{ shop.permanent_domain }}";


function checkShopifyFormatMoney() {

$m(".money").parent().find(".icon-fallback-text").remove();
var data = [];
var mlvedaData = {};
  
 $m.fn.removeAttributes = function() {
  return this.each(function() {
    var attributes = $m.map(this.attributes, function(item) {
      return item.name;
    });
    var span = $m(this);
    $m.each(attributes, function(i, item) {
    span.removeAttr(item);
    });
  });
}

 removeFrom();

var dataSet = [];
 
$m("a").each(function() {
  
  if($m(this).attr("href") && $m(this).attr("href").replace(/\?.*/,"").toString().indexOf("/products/") != -1){
    var $mhandleArray = $m(this).attr('href').split("/");
    var $mhandle = $mhandleArray[$mhandleArray.length - 1].split("\?")[0];
    
   dataSet.push($m(this).attr('href').split("\?")[0]);
  }
});
  
  uniqueArray = dataSet.filter(function(item, pos) {
    return dataSet.indexOf(item) == pos;
  })
  

  for (var item = 0 ; item < uniqueArray.length ; item++) {

    if(uniqueArray[item].indexOf(".jpeg") == -1 && uniqueArray[item].indexOf(".jpg") == -1 && uniqueArray[item].indexOf(".png") == -1) {
      data.push({"url": decodeURI(uniqueArray[item])});
    }
  }


mlvedaData = {"data": data};



    var abcd = $m.ajax({
        url: mlvedaCallUrl,
        type: "POST",
        dataType: "json",
        timeout: 10000,
        data: {data: JSON.stringify(mlvedaData)},
        success: function(response) {
            if (response === "") {
         {{ settings.mlvedaMCP_isSaleClass }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saleClass }}{ visibility : visible; }</style>").appendTo("head");
         {{ settings.mlvedaMCP_isSaveAmount }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saveAmountClass }}{ visibility : visible; }</style>").appendTo("head");
          {{ settings.mlvedaMCP_isSalePercentage }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_salePercentageClass }}{ visibility : visible; }</style>").appendTo("head");
                $m("<style type=\"text/css\">span.money { display: inline; }</style>").appendTo("head");
                mlvedaFlagCalled = true;
                if(typeof Currency !== "undefined" && typeof Currency.moneyFormats !== "undefined") {
                  mlvedaload();
                }
            }
            else {
		$m('span.money span.money').each(function() {
                                $m(this).parents('span.money').removeClass('money');
                });
                $m.each(response.data, function(index, element) {
                  if(element.url.indexOf("view=quick") == -1){
                    $m("a").each(function() {
                      if($m(this).attr("href") && $m(this).attr("href").replace(/\?.*/,"") === encodeURI(element.url)){
                        if (element.variantId)
                        {
                         //   $m(this).attr("href", element.url + "?variant=" + element.variantId);
                        }
                        
		if($m(this).find(".money").length <= 0 && $m(this).parent().find(".price__regular").length > 0 &&$m(this).parent().find(".price__sale").length > 0){
                            if($m(this).parent().find(".price__regular:visible").length > 0){
                              $mmlvedamoney = $m(this).find(".price__regular:visible .money:not("+ span_in_save +")");
                              if(!$mmlvedamoney.html() && $m(this).parent().find(".price__regular:visible .money:not("+ span_in_save +")").length <=2){
                                $mmlvedamoney = $m(this).parent().find(".price__regular:visible .money:not("+ span_in_save +")");
                                if (!$mmlvedamoney.html() && $m(this).parent().parent().find(".price__regular:visible .money:not("+ span_in_save +")") <=2)
                                {
                                  $mmlvedamoney = $m(this).parent().parent().find(".price__regular:visible .money:not("+ span_in_save +")");
                                }
                              }
                            }
                            else{
                              $mmlvedamoney = $m(this).find(".price__sale:visible .money:not("+ span_in_save +")");
                              if(!$mmlvedamoney.html() && $m(this).parent().find(".price__sale:visible .money:not("+ span_in_save +")").length <=2){
                                $mmlvedamoney = $m(this).parent().find(".price__sale:visible .money:not("+ span_in_save +")");
                                if (!$mmlvedamoney.html() && $m(this).parent().parent().find(".price__sale:visible .money:not("+ span_in_save +")").length <=2)
                                {
                                  $mmlvedamoney = $m(this).parent().parent().find(".price__sale:visible .money:not("+ span_in_save +")");
                                }
                              }
                            }
                        }
                        else{
                            $mmlvedamoney = $m(this).find(".money:not("+ span_in_save +")");
                            if(!$mmlvedamoney.html() && $m(this).parent().find(".money:not("+ span_in_save +")").length <= 2){
                              $mmlvedamoney = $m(this).parent().find(".money:not("+ span_in_save +")");
                              if (!$mmlvedamoney.html() && $m(this).parent().parent().find(".money:not("+ span_in_save +")").length <= 2)
                              {
                                $mmlvedamoney = $m(this).parent().parent().find(".money:not("+ span_in_save +")");
                              }
                            }
                        }

                        if (element.price && $mmlvedamoney.html() && $m(this).parent().parent().find("select[name='id']").closest('form:visible').length == 0 && $m(this).parents('form[action*="/cart"]').length == 0)
                        {
                          var $mfirstMlvedamoney = null;
                          var $msecondMlvedamoney = null;
                      	    $mmlvedamoney.each(function() {
                            if($mfirstMlvedamoney == null) {
                              $mfirstMlvedamoney = $m(this);
                            }
                            else if($msecondMlvedamoney == null ) {
                              $msecondMlvedamoney = $m(this);//parseInt($m(this).html().replace(/[^0-9]/g, ""),10);
                            }
                            else {                              
                              return false;//parseInt($m(this).html().replace(/[^0-9]/g, ""),10)                              
                            }                           
                            
                          });
                          
                        var $saleElement;
                          if(isSaleClass){
                            $saleElement = findSaleDetails.call($m(this), saleClass);
                          }

                          var $saveAmountElement;
                          if(isSaveAmount){
                            $saveAmountElement  = findSaleDetails.call($m(this),saveAmountClass);
                          }

                          var $salePercentage;
                          if(isSalePercentage){
                            $salePercentage = findSaleDetails.call($m(this), salePercentageClass);		
                          }
                      
                        if($msecondMlvedamoney == null) {
                          $mfirstMlvedamoney.html(Mlveda.formatMoney(element.price, "{{ shop.money_format | strip_html }}"));
						
                          $mfirstMlvedamoney.removeAttributes();
                          $mfirstMlvedamoney.addClass("money");
                          $mfirstMlvedamoney.css("color",priceColor);

                          if("undefined" != typeof element.compare_at_price){
                            "undefined" != typeof $saveAmountElement && $saveAmountElement.find("span.money").replaceWith(Mlveda.formatMoney((element.compare_at_price- element.price).toFixed(2),"{{ shop.money_format  }}"));
                            "undefined" != typeof $salePercentage && "undefined" != typeof $salePercentage.html() && $salePercentage.html($salePercentage.html().replace(/\d{1,2}%/g,  "" +(((element.compare_at_price - element.price) *100) / element.compare_at_price).toFixed(0) +"%"));
                          }
                          else{
                            "undefined" != typeof $saleElement && $saleElement.remove();
                            "undefined" != typeof $saveAmountElement && $saveAmountElement.remove();
                            "undefined" != typeof $salePercentage && $salePercentage.remove();
                            isTextWithPrice && removeOtherText($mfirstMlvedamoney,textWithPrice);
                          }

				
                        }
                        else {
						var currentPrice = new RegExp('[,|\.]{1}[0-9]{2}$','g').test($msecondMlvedamoney.html().replace(/[^0-9 .,]/g,"").trim()) ? parseInt	($msecondMlvedamoney.html().replace(/[^0-9]/g, ""),10)/100 : parseInt($msecondMlvedamoney.html().replace(/[^0-9]/g, ""),10);
						var previousPrice = new RegExp('[,|\.]{1}[0-9]{2}$','g').test($mfirstMlvedamoney.html().replace(/[^0-9 .,]/g,"").trim()) ? parseInt($mfirstMlvedamoney.html().replace(/[^0-9]/g, ""),10)/100 : parseInt($mfirstMlvedamoney.html().replace(/[^0-9]/g, ""),10);                   
		        //var currentPrice = parseInt($msecondMlvedamoney.html().replace(/[^0-9]/g, ""),10);
                        //var previousPrice = parseInt($mfirstMlvedamoney.html().replace(/[^0-9]/g, ""),10);
                            if (currentPrice >= previousPrice ) {
                              if(!(element.compare_at_price) || parseInt(element.compare_at_price) <= parseInt(element.price)) {
                                $mfirstMlvedamoney.html(Mlveda.formatMoney(element.price, "{{ shop.money_format | strip_html }}"));
                                $msecondMlvedamoney.html("");

                                $mfirstMlvedamoney.removeAttributes();
                                $mfirstMlvedamoney.addClass("money");

                                $msecondMlvedamoney.removeClass("money");
                                $mfirstMlvedamoney.css("color",priceColor);

                                "undefined" != typeof $saleElement && $saleElement.remove();
                                "undefined" != typeof $saveAmountElement && $saveAmountElement.remove();
                                "undefined" != typeof $salePercentage && $salePercentage.remove();
                                isTextWithPrice && removeOtherText($mfirstMlvedamoney,textWithPrice);
                              } else {
                                $msecondMlvedamoney.html(Mlveda.formatMoney(element.compare_at_price, "{{ shop.money_format | strip_html }}"));
                                $mfirstMlvedamoney.html(Mlveda.formatMoney(element.price, "{{ shop.money_format  | strip_html }}"));

                                $msecondMlvedamoney.removeAttributes();
                                $msecondMlvedamoney.addClass("money");

                                $mfirstMlvedamoney.removeAttributes();
                                $mfirstMlvedamoney.addClass("money");

								"undefined" != typeof $saveAmountElement && $saveAmountElement.find("span.money").replaceWith(Mlveda.formatMoney((element.compare_at_price- element.price).toFixed(2),"{{ shop.money_format  }}"));
							 	"undefined" != typeof $salePercentage && "undefined" != typeof $salePercentage.html() && $salePercentage.html($salePercentage.html().replace(/\d{1,2}%/g,  "" +(((element.compare_at_price - element.price) *100) / element.compare_at_price).toFixed(0) +"%"));
                              }
                              }
                              else if( currentPrice < previousPrice ){
                                if(!(element.compare_at_price) || parseInt(element.compare_at_price) <= parseInt(element.price)) {
                                  $msecondMlvedamoney.html(Mlveda.formatMoney(element.price, "{{ shop.money_format  | strip_html }}"));
                                  $mfirstMlvedamoney.html("");

                                  $msecondMlvedamoney.removeAttributes();
                                  $msecondMlvedamoney.addClass("money");

                                  $mfirstMlvedamoney.removeClass("money");
                                  $msecondMlvedamoney.css("color",priceColor);

                                  "undefined" != typeof $saleElement && $saleElement.remove();
                                  "undefined" != typeof $saveAmountElement && $saveAmountElement.remove();
                                  "undefined" != typeof $salePercentage && $salePercentage.remove();
                                  isTextWithPrice && removeOtherText($msecondMlvedamoney,textWithPrice);
                                } else {
                                  $mfirstMlvedamoney.html(Mlveda.formatMoney(element.compare_at_price, "{{ shop.money_format | strip_html }}"));
                                  $msecondMlvedamoney.html(Mlveda.formatMoney(element.price, "{{ shop.money_format | strip_html }}"));
                                     
                                  $mfirstMlvedamoney.removeAttributes();
                                  $mfirstMlvedamoney.addClass("money");

                                  $msecondMlvedamoney.removeAttributes();
                                  $msecondMlvedamoney.addClass("money");   
	
				  				  "undefined" != typeof $saveAmountElement && $saveAmountElement.find("span.money").replaceWith(Mlveda.formatMoney((element.compare_at_price- element.price).toFixed(2),"{{ shop.money_format  }}"));
							 	  "undefined" != typeof $salePercentage && "undefined" != typeof $salePercentage.html() && $salePercentage.html($salePercentage.html().replace(/\d{1,2}%/g,  "" +(((element.compare_at_price - element.price) *100) / element.compare_at_price).toFixed(0) +"%"));                                
                                }
                              }
                              
                             }
                        }
					  }                                            
                    });
                            }
                });
                              
                //$m("<style type=\"text/css\">span.money{ display: inline;}</style>").appendTo("head");
 {{ settings.mlvedaMCP_isSaleClass }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saleClass }}{ visibility : visible; }</style>").appendTo("head");
 {{ settings.mlvedaMCP_isSaveAmount }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saveAmountClass }}{ visibility : visible; }</style>").appendTo("head");
 {{ settings.mlvedaMCP_isSalePercentage }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_salePercentageClass }}{ visibility : visible; }</style>").appendTo("head");
                mlvedaFlagCalled = true;
                if(typeof Currency !== "undefined" && typeof Currency.moneyFormats !== "undefined") {
                  mlvedaload();
                }          
            }
                      //mlvedaload();
        },
        error: function(xhr, textStatus, errorThrown) {
 {{ settings.mlvedaMCP_isSaleClass }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saleClass }}{ visibility : visible; }</style>").appendTo("head");
 {{ settings.mlvedaMCP_isSaveAmount }} && $m("<style type='text/css'>{{ settings.mlvedaMCP_saveAmountClass }}{ visibility : visible; }</style>").appendTo("head");
 {{ settings.mlvedaMCP_isSalePercentage }} &&$m("<style type='text/css'>{{ settings.mlvedaMCP_salePercentageClass }}{ visibility : visible; }</style>").appendTo("head");
            $m("<style type=\"text/css\">span.money{ display: inline; }</style>").appendTo("head");
            mlvedaFlagCalled = true;
                if(typeof Currency !== "undefined" && typeof Currency.moneyFormats !== "undefined") {
                  mlvedaload();
                }          
        }
    });
}

checkShopifyFormatMoney();
     
                        
function frequentlyBoughtTogether() { 

$m("ul.cbb-frequently-bought-selector-list li select").each(function() {
if ( typeof $m(this).attr('mlveda_triggered') == 'undefined' ) { 
var this_one = $m(this); 
var variant_triggered_upsell = false; var mlveda_option_found_upsell = false; var first_variant_arr = this_one.children()[0].innerHTML.split("-");
if ( pattern.test(first_variant_arr[first_variant_arr.length - 1].trim()) ) { mlveda_option_found_upsell = true; }
if ( mlveda_option_found_upsell && first_variant_arr.length == 1 ) {
this_one.css("display", "none");

this_one.children().each(function() {

  if ( country != "undefined" && country != "null" && $m(this).html() == country ) {
      this_one.val($m(this).val())[0].dispatchEvent(new Event("change", {bubbles: true}));
      variant_triggered_upsell = true;
  }

});

this_one.children().each(function() {

  if ( !variant_triggered_upsell && continent != "undefined" && continent != "null" && $m(this).html() == continent ) {
      this_one.val($m(this).val())[0].dispatchEvent(new Event("change", {bubbles: true}));
      variant_triggered_upsell = true;
  }

});

this_one.children().each(function() {

  if ( !variant_triggered_upsell && country != "undefined" && country != "null" && continent != "undefined" && continent != "null" && $m(this).html() == "intl" ) {
      this_one.val($m(this).val())[0].dispatchEvent(new Event("change", {bubbles: true}));
      variant_triggered_upsell = true;
  }

});

if ( !variant_triggered_upsell ) {
	this_one.val($m($m(this).children()[0]).val())[0].dispatchEvent(new Event("change", {bubbles: true}));
  	this_one.attr('mlveda_triggered', 'true');
}

}
else if ( mlveda_option_found_upsell && first_variant_arr.length > 1 ) {
this_one.children().each(function(){

  $m(this).css("display", "none");

  var current_option = $m(this).html();
  var variants_arr = current_option.split("-");
  for ( var i = 0; i < variants_arr.length; i++ ) {
  	variants_arr[i] = variants_arr[i].trim();
  }

    if ( country != "undefined" && country != "null" && variants_arr[variants_arr.length - 1] == country ) {
        variants_arr.pop();
        $m(this).html(variants_arr.join(" - "));
        $m(this).css("display", "inline");
        variant_triggered_upsell = true;
    }

});

if ( !variant_triggered_upsell ) {
this_one.children().each(function(){

  $m(this).css("display", "none");

  var current_option = $m(this).html();
  var variants_arr = current_option.split("-");
  for ( var i = 0; i < variants_arr.length; i++ ) {
  	variants_arr[i] = variants_arr[i].trim();
  }

    if ( continent != "undefined" && continent != "null" && variants_arr[variants_arr.length - 1] == continent ) {
        variants_arr.pop();
        $m(this).html(variants_arr.join(" - "));
        $m(this).css("display", "inline");
        variant_triggered_upsell = true;
    }

});
}

if ( !variant_triggered_upsell ) {
this_one.children().each(function(){

  $m(this).css("display", "none");

  var current_option = $m(this).html();
  var variants_arr = current_option.split("-");
  for ( var i = 0; i < variants_arr.length; i++ ) {
  	variants_arr[i] = variants_arr[i].trim();
  }

    if ( country != "undefined" && country != "null" && continent != "undefined" && continent != "null" && variants_arr[variants_arr.length - 1] == "intl" ) {
        variants_arr.pop();
        $m(this).html(variants_arr.join(" - "));
        $m(this).css("display", "inline");
        variant_triggered_upsell = true;
    }

});
}

if ( variant_triggered_upsell ) {
	this_one.val($m(this_one.find("option[style*='display: inline']")[0]).val())[0].dispatchEvent(new Event("change",{bubbles:true}));
  	this_one.attr('mlveda_triggered', 'true');
} else if ( country != "undefined" && country != "null" && continent != "undefined" && continent != "null" ) {
  var default_variant = first_variant_arr[first_variant_arr.length - 1].trim();
  this_one.children().each(function(){
  	var current_option = $m(this).html();
  	var variants_arr = current_option.split("-");
  	for ( var i = 0; i < variants_arr.length; i++ ) {
  		variants_arr[i] = variants_arr[i].trim();
  	}
    if ( variants_arr[variants_arr.length - 1] == default_variant ) {
    	variants_arr.pop();
        $m(this).html(variants_arr.join(" - "));
        $m(this).css("display", "inline");
    }
  });
  this_one.val($m(this_one.find("option[style*='display: inline']")[0]).val())[0].dispatchEvent(new Event("change",{bubbles:true}));
  this_one.attr('mlveda_triggered', 'true');
}

}
if ( first_variant_arr.length > 1 ) {
	first_variant_arr.pop();
	this_one.children()[0].innerHTML = first_variant_arr.join(" - ");
}

} });
}

                        
(function () {
 
     
  const open = XMLHttpRequest.prototype.open;

  XMLHttpRequest.prototype.open = function(){
    var url_before_ajax = arguments;
    
    {% if shop.enabled_currencies.size > 1 %}
    for(mysingleURL of appendStoreCurrency){
      var singleURL = mysingleURL.trim();
         if(singleURL.length >0 && "undefined"!= typeof url_before_ajax && url_before_ajax[1].indexOf("currency="+mlvedaShopCurrency) == -1 &&(url_before_ajax[1].indexOf(singleURL) != -1)){		
           if(url_before_ajax[1].indexOf("&") != -1 || url_before_ajax[1].indexOf("?") != -1){
              url_before_ajax[1] = url_before_ajax[1] + "&currency="+mlvedaShopCurrency;         	
           }
           else{
              url_before_ajax[1] = url_before_ajax[1] + "?currency="+mlvedaShopCurrency;
              }
         }
    }
    {% endif %}
    
    if ( url_before_ajax[1].indexOf("add.js")!=-1 || url_before_ajax[1].indexOf("change.js")!=-1 || url_before_ajax[1].indexOf("cart")!=-1 ) {
      lets_remove_mlveda=true;
    }
	return open.apply(this,arguments);
  }

  const send = XMLHttpRequest.prototype.send;
  XMLHttpRequest.prototype.send = function() {
    this.addEventListener('load', function() {
      for(mysingleURL of myURLarray){
        var singleURL = mysingleURL.trim();
	   	if(singleURL.length > 0 && "undefined" != typeof this.responseURL && (this.responseURL.indexOf(singleURL)!= -1 || (this.responseURL.indexOf("/search")!= -1 && this.responseURL.match(queryParameterRegex) == null))) {
          if ( this.responseURL.indexOf("frequently") != -1 ) {
          	frequentlyBoughtTogether();
          } else {
            $m("<style type=\"text/css\">span.money{ display: none; }</style>").appendTo("head");
            checkShopifyFormatMoney();
          }
        }
      }
          // add your global handler here
      })
      return send.apply(this, arguments)
  }
    
    const fetch = window.fetch;
    window.fetch = function(){
      var e = arguments;

    if (e[0].indexOf("add.js")!=-1 || e[0].indexOf("change.js")!=-1 || e[0].indexOf("cart")!=-1 ) {
      lets_remove_mlveda=true;
    }
      {% if shop.enabled_currencies.size > 1 %}
      
      for ( mysingleURL of appendStoreCurrency) {
      	var singleURL = mysingleURL.trim();
          if( singleURL.length > 0 && "undefined"!= typeof arguments && arguments[0].indexOf("currency="+mlvedaShopCurrency) == -1 && arguments[0].indexOf(singleURL) != -1){		
            if(arguments[0].indexOf("&") != -1 || arguments[0].indexOf("?") != -1){
              arguments[0] = arguments[0] + "&currency="+mlvedaShopCurrency;         	
           	} else {
              arguments[0] = arguments[0] + "?currency="+mlvedaShopCurrency;
            }
          }
      }
      
      if(e[0].indexOf("checkouts.json")!=-1){
    	var newBODY = {...JSON.parse(e[1].body)};
        if(newBODY.checkout.presentment_currency != Currency.currentCurrency){
    	   	newBODY.checkout.presentment_currency = Currency.currentCurrency;
    	}
        arguments[1].body = JSON.stringify(newBODY);
  	  }
      {% endif %}
      
      return fetch.apply(this, Array.prototype.slice.call(arguments)).then(function(t) {
          if (!t.ok)
            return t;
            try {
              for(mysingleURL of myURLarray){
                var singleURL = mysingleURL.trim();
                  if(singleURL.length > 0 && "undefined" != typeof t.url && (t.url.indexOf(singleURL)!= -1 || (t.url.indexOf("/search")!= -1 && t.url.match(queryParameterRegex) == null))) {
                    if ( t.url.indexOf("frequently") != -1 ) {
                    	frequentlyBoughtTogether();
                    } else {
                      setTimeout(() => {
                          $m("<style type=\"text/css\">span.money{ display: none; }</style>").appendTo("head");
                          checkShopifyFormatMoney();
                      },300);
                  	}	
                  }
              }
            } catch (e) {
                console && console.warn && console.warn("[shop_events_listener] Error in handleFetchRequest:  " + e.message);
            }
            return t
      })
    }
 
})();

</script>

{% else %}
	<script>mlvedaFlagCalled = true;</script>
{% endif %}